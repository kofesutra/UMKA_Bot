# # -----------------------------------------------------------------------------------
# # –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏–º–µ–π–ª–∞
# from aiogram import Bot
# from aiogram.fsm.context import FSMContext
# from aiogram.types import CallbackQuery, Message
#
# from Config.config import CHANNEL_FOR_CHECKING
# from Keyboards.Inline_Keyboards import kb_9, kb_41, kb_5
# from Keyboards.Reply_Keyboards import r_kb_5
# from Utils.Check_is_email import is_email_correct
# from Utils.DB import update_values_db, get_max_id, request_to_db_column
# from Utils.Defs import send_email_wo_bonus, select_gift_yes
# from Utils.StateMachine import States
#
#
# async def subscribing(call: CallbackQuery, state: FSMContext, bot: Bot):
#     data = await state.get_data()
#     user_id_here = data['user_id']
#
#     tmp = await bot.get_chat_member(CHANNEL_FOR_CHECKING, user_id_here)
#     if tmp.status == 'left':
#         await bot.send_message(call.message.chat.id,
#                                "–û–π! –Ø –≤–∏–∂—É –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á—É–¥–µ—Å–Ω—ã–π –∫–∞–Ω–∞–ª '[–ö–æ—Ä–æ–ª–µ–≤—ã –ö–∞–ª–æ—Ä–∏–π üëë]("
#                                "https://t.me/+Vx6aUW5AO6U5M2U0)'!\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –∞ —è –í–∞—Å –ø–æ–∫–∞ –ø–æ–¥–æ–∂–¥—É!",
#                                disable_web_page_preview=True, parse_mode='Markdown', reply_markup=kb_5)
#         if call.data == 'subscribed':
#             tmp = await bot.get_chat_member(CHANNEL_FOR_CHECKING, user_id_here)
#             if tmp.status != 'left':
#                 await state.update_data(state_of_use='5_–ø–æ–¥–ø–∏—Å–∞–Ω')
#                 data = await state.get_data()
#                 list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
#                 update_values_db(list_values_of_DB, get_max_id(data['user_id']))
#
#                 await getting_email(call, state, bot)
#     else:
#         await state.update_data(state_of_use='5_–ø–æ–¥–ø–∏—Å–∞–Ω')
#         data = await state.get_data()
#         list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
#         update_values_db(list_values_of_DB, get_max_id(data['user_id']))
#
#         await getting_email(call, state, bot)
#
#
# async def getting_email(call: CallbackQuery, state: FSMContext, bot: Bot):
#     data = await state.get_data()
#     user_id_here = data['user_id']
#     request = await is_email_in_DB(user_id_here)
#     if request == '0':
#         await bot.send_message(call.message.chat.id, "üî∏ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –∏–º–µ–π–ª —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
#                                parse_mode='MarkDown', reply_markup=r_kb_5)
#         await state.set_state(States.email_checking)
#
#         await state.update_data(state_of_use='6_—Å—Ç–∞—Ä—Ç_–∑–∞–ø—Ä–æ—Å–∞_–∏–º–µ–π–ª–∞')
#         data = await state.get_data()
#         list_values_of_DB = f"state_of_use = '{data['state_of_use']}', gift = '{data['gift']}'"
#         id_in_base = get_max_id(data['user_id'])
#         update_values_db(list_values_of_DB, id_in_base)
#
#     else:
#         is_correct = is_email_correct(request)
#         if is_correct:
#             await bot.send_message(call.message.chat.id, f"‚û°Ô∏è –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º: –í–∞—à email {request}", reply_markup=kb_9)
#             await state.update_data(email=request)
#             await state.set_state(States.email_right)
#
#
# async def email_checking(message: Message, state: FSMContext, bot: Bot):
#     if message.text != '–ë–µ–∑ –∏–º–µ–π–ª–∞':
#         is_correct = is_email_correct(message.text)
#         if is_correct:
#             await message.answer(f"‚û°Ô∏è –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º: –í–∞—à email {message.text}", reply_markup=kb_9)
#             await state.update_data(email=message.text)
#             await state.set_state(States.email_right)
#         else:
#             await message.answer(f"–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∏–º–µ–π–ª", reply_markup=None)
#     else:
#         await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –∏–º–µ–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=kb_41)
#         await state.set_state(States.email_right)
#
#
# async def end_of_email(call: CallbackQuery, state: FSMContext, bot: Bot):
#     button = call.data
#     if button == 'right_email':
#         await state.update_data(state_of_use='7_–∏–º–µ–π–ª_–ø–æ–ª—É—á–µ–Ω')
#         data = await state.get_data()
#         list_values_of_DB = f"state_of_use = '{data['state_of_use']}', email = '{data['email']}'"
#         id_in_base = get_max_id(data['user_id'])
#         update_values_db(list_values_of_DB, id_in_base)
#
#         # !!! –¢–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ 1!!!
#         await state.set_state(States.email_exit)
#         await exit_email(call, state, bot)
#
#     elif button == 'without_email':
#         await state.update_data(state_of_use='7_–±–µ–∑_–∏–º–µ–π–ª–∞')
#         await state.update_data(is_email='wo_email')
#         # await state.update_data(wo_email='wo_email')
#         data = await state.get_data()
#         list_values_of_DB = f"state_of_use = '{data['state_of_use']}', is_email = 'wo_email'"
#         id_in_base = get_max_id(data['user_id'])
#         update_values_db(list_values_of_DB, id_in_base)
#
#         # !!! –¢–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ 2!!!
#         await state.set_state(States.email_exit)
#         await exit_email(call, state, bot)
#
#     elif button == 'wrong_email':
#         await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
#         await bot.send_message(call.message.chat.id, "üî∏ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –∏–º–µ–π–ª",
#                                parse_mode='MarkDown', reply_markup=None)
#         await state.set_state(States.email_checking)
#
#
# async def exit_email(call, state, bot):
#     data = await state.get_data()
#     exit_here = data['exit_email']
#     if exit_here == 1:
#         await state.set_state(States.send_email_wo_bonus)
#         await send_email_wo_bonus(call, state, bot)
#     elif exit_here == 2:
#         await state.set_state(States.select_gift_yes)
#         await select_gift_yes(call, state, bot)
#
#
# async def is_email_in_DB(user_id):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ –∏–º–µ–π–ª
#     was_email_received = '0'
#     xxx = request_to_db_column('email', 'user_id', user_id)
#     for x in tuple(xxx):
#         for v in x:
#             v = str(v)
#             if v != 'None':
#                 was_email_received = v
#                 break
#     return was_email_received
