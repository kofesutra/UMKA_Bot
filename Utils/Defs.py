import asyncio
import datetime

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile

from Calculation.Calc_reports import calc_1_report, calc_2_report, calc_3_report, calc_5_report, calc_4_report
from Email.Sending_email import sending_email_pdf, sending_email_wo_pdf, sending_email_alt_pdf
from Textes.List_of_Bonuses import list_of_bonuses, bonus_1, bonus_2, bonus_3, bonus_4, bonus_5, bonus_6, bonus_7, \
    bonus_8, bonus_9, bonus_10, list_of_bonuses_2
from Textes.Text_IMT import interpretation_1
from Keyboards.Inline_Keyboards import kb_5, kb_14, \
    kb_15, kb_24, kb_25, kb_28, kb_29, kb_30, kb_31, kb_33, kb_34, kb_9, \
    get_keyboard_37, kb_38, kb_39, kb_40, kb_35_1, get_keyboard_23, get_keyboard_23_2, kb_41, kb_43, get_keyboard_37_1, \
    get_keyboard_37_2
from Keyboards.Reply_Keyboards import r_kb_1, r_kb_5
from Utils.Check_bonuses import check_bonus_sended
from Utils.Check_is_email import is_email_correct
from Utils.DB import add_all_to_db, update_values_db, get_max_id, request_to_db_column
from Utils.Deeplinks import process_deeplinks
from Utils.Defs_alt_enter import start_alt_enter, alt_sell
from Utils.Process_invite_link import process_invite_link
from Utils.StateMachine import States
from Config.config import NAME_FOR_BASE, LIST_ADMINS, PROMOCODE, CHANNEL_FOR_CHECKING, BOT_URL, BOT_URL_INVITE
from datetime import datetime

from Utils.Defs_admin import on_start_admin


async def on_start(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_id_here = message.from_user.id
    if user_id_here in LIST_ADMINS:  # –ï—Å–ª–∏ –≤–æ—à—ë–ª –∞–¥–º–∏–Ω, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await state.set_state(States.admin)
        await on_start_admin(user_id_here)
    else:
        await state.update_data(user_id=user_id_here)
        username_here = message.from_user.username
        if username_here is None:
            username_here = 'None'
        await state.update_data(username=username_here)
        first_name_here = message.from_user.first_name
        if first_name_here is None:
            first_name_here = 'None'
        await state.update_data(first_name=first_name_here)
        last_name_here = message.from_user.last_name
        if last_name_here is None:
            last_name_here = 'None'
        await state.update_data(last_name=last_name_here)
        await state.update_data(date=message.date)
        await state.update_data(which_bot=NAME_FOR_BASE)
        await state.update_data(state_of_use='1_–∑–∞–ø—É—Å–∫')
        await state.update_data(is_email='none')  # –ù—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ
        await state.update_data(user_id_inviter='none')  # –ù—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ
        await state.update_data(gift='None')  # –ù—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ DeepLinks
        deep = await process_deeplinks(message.text, state, bot)
        # -----

        data = await state.get_data()
        date_time_2 = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        user_id_inviter = data['user_id_inviter']

        list_subjects_of_DB = "user_id, username, first_name, last_name, date_of_use, which_bot, state_of_use, come_from, is_email"
        list_data_of_DB = f"{data['user_id']}, '{data['username']}', '{data['first_name']}', '{data['last_name']}', " \
                          f"'{date_time_2}', '{data['which_bot']}', '{data['state_of_use']}', '{data['come_from']}', '{data['is_email']}'"
        add_all_to_db(list_subjects_of_DB, list_data_of_DB)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ DeepLinks –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        if deep == '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π':
            await state.set_state(States.alt_start)
            await start_alt_enter(state, bot)

        elif deep == 'invitelink':
            data = await state.get_data()
            user_id_inviter = data['user_id_inviter']
            await process_invite_link(user_id_inviter, state, bot)

        # else:
        await message.answer_photo(FSInputFile("Media/KK_Bot_Ava.png"),
                                   "‚úã –ü—Ä–∏–≤–µ—Ç! –Ø –£–ú–ö–ê-–±–æ—Ç –∏ –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫!.\n"
                                   f"–Ø –≥–æ—Ç–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –í–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞, "
                                   f"–∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å, –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ –∫–æ–µ-—á—Ç–æ –µ—â—ë ü§ì",
                                   disable_web_page_preview=True, parse_mode='Markdown',
                                   reply_markup=None)

        await asyncio.sleep(2)
        await message.answer("1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö")
        await state.set_state(States.height_state)


async def run_select_bonus(call: CallbackQuery, state: FSMContext, bot: Bot):
    # !!!!! –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –≤—ã—Å–ª–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ
    data = await state.get_data()
    user_id_here = data['user_id']

    is_bonus_selected, is_bonus_sended_by_email, is_bonus_sended_by_bot = await check_bonus_sended(user_id_here, state,
                                                                                                   bot)
    if is_bonus_sended_by_email == '0' and is_bonus_sended_by_bot == '0':
        await bot.send_message(call.message.chat.id,
                               f'üî¥\n–ü–æ–∫–∞ —è —Å—á–∏—Ç–∞—é –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ —è –ø—Ä–∏—à–ª—é –µ–≥–æ –í–∞–º',
                               parse_mode='MarkDown', reply_markup=None)
        await asyncio.sleep(3)
        await bot.send_photo(call.message.chat.id, FSInputFile("Media/All.png"), caption=list_of_bonuses,
                             reply_markup=kb_24)
        await state.set_state(States.select_gift)
        await select_gift(call, state, bot)

        await state.update_data(state_of_use='3_—Å—Ç–∞—Ä—Ç_–≤—ã–±–æ—Ä–∞_–ø–æ–¥–∞—Ä–∫–∞')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

    else:
        # await state.set_state(States.send_email_wo_bonus)
        # await send_email_wo_bonus(call, state, bot)
        await state.update_data(exit_email=1)
        # await state.set_state(States.is_subscribed)
        # await subscribing(call, state, bot)

        data = await state.get_data()
        list_values_of_DB = f"is_email = 'wo_email'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

        await state.set_state(States.select_gift_yes)
        await select_gift_yes(call, state, bot)


async def send_email_wo_bonus(call, state, bot):
    data = await state.get_data()
    is_email = data['is_email']
    come_from = data['come_from']
    if come_from == '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π':
        await state.set_state(States.alt_sell)
        await select_gift(call, state, bot)
        await alt_sell(call, state, bot)
    else:
        if is_email != 'wo_email':
            await sending_email_wo_pdf(state)

        await state.set_state(States.declaration)
        await select_gift(call, state, bot)
        await run_declaration(call, state, bot)


async def select_gift(call: CallbackQuery, state: FSMContext, bot: Bot):
    comm_here = ''
    list_of_numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
    activ = call.data  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–±—ç–∫–∞ - –∫–Ω–æ–ø–∫–∞ —Å –∫–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–∂–∞—Ç–∞
    if activ in list_of_numbers:
        if activ == '1':
            comm_here = bonus_1
        if activ == '2':
            comm_here = bonus_2
        if activ == '3':
            comm_here = bonus_3
        if activ == '4':
            comm_here = bonus_4
        if activ == '5':
            comm_here = bonus_5
        if activ == '6':
            comm_here = bonus_6
        if activ == '7':
            comm_here = bonus_7
        if activ == '8':
            comm_here = bonus_8
        if activ == '9':
            comm_here = bonus_9
        if activ == '10':
            comm_here = bonus_10

        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await bot.send_message(call.message.chat.id, f'–í–∞—à –≤—ã–±–æ—Ä: "{comm_here}", –≤–µ—Ä–Ω–æ?', parse_mode='MarkDown',
                               reply_markup=kb_25)
        await state.update_data(gift=str(activ))

        await state.update_data(state_of_use='4_–≤—ã–±—Ä–∞–Ω_–ø–æ–¥–∞—Ä–æ–∫')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}', gift = '{data['gift']}'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

    elif activ == 'yes':
        await state.update_data(exit_email=2)
        # await state.set_state(States.is_subscribed)
        # await subscribing(call, state, bot)

        await state.update_data(is_email='wo_email')
        # await state.update_data(wo_email='wo_email')
        data = await state.get_data()
        list_values_of_DB = f"is_email = 'wo_email'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

        await state.set_state(States.select_gift_yes)
        await select_gift_yes(call, state, bot)

    elif activ == 'no':
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await bot.send_message(call.message.chat.id, "üü¢ –•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–¥–∞—Ä–æ–∫!",
                               reply_markup=None)
        await bot.send_message(call.message.chat.id, list_of_bonuses, parse_mode='MarkDown', reply_markup=kb_24)


async def select_gift_yes(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    is_email = data['is_email']
    come_from = data['come_from']
    if come_from == '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π':
        if is_email != 'wo_email':
            await sending_email_alt_pdf(state)
            await bot.send_message(call.message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ!", reply_markup=None)
        else:
            await bot.send_message(call.message.chat.id,
                                   "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–∑–∂–µ, —á–∏—Ç–∞–π—Ç–µ –¥–∞–ª–µ–µ",
                                   reply_markup=None)
        await asyncio.sleep(1)

        await state.set_state(States.alt_sell)
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await alt_sell(call, state, bot)

    else:
        # if is_email != 'wo_email':
        #     await sending_email_pdf(state)
        #     await bot.send_message(call.message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ!", reply_markup=None)
        # else:
        # await bot.send_message(call.message.chat.id,
        #                            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–∑–∂–µ, —á–∏—Ç–∞–π—Ç–µ –¥–∞–ª–µ–µ",
        #                            reply_markup=None)
        # await asyncio.sleep(1)

        await state.set_state(States.declaration)
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await run_declaration(call, state, bot)


async def run_declaration(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    mess = calc_1_report(data['imt'])
    mess_2 = calc_2_report(data['perf_wei'])
    mess_3 = calc_3_report(data['norm_cal'], data['min_cal'])
    mess_4 = calc_4_report(data['water'])
    mess_5 = calc_5_report(data['protein'], data['fat'], data['carbohidrate'])

    await bot.send_photo(call.message.chat.id, FSInputFile("Media/KK_Bot_Results_3.png"),
                         caption="." + "\n" + mess + "\n" + "\n" + mess_2 + "\n" + "\n" + mess_3 + "\n" + "\n" + mess_4 + "\n" + "\n" + mess_5,
                         reply_markup=r_kb_1)

    await asyncio.sleep(3)

    # await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id, "üü† –ö–ê–ö –ü–û–ù–ò–ú–ê–¢–¨ –ò –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–û–õ–£–ß–ï–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´?", reply_markup=r_kb_1)

    await asyncio.sleep(1)
    await bot.send_message(call.message.chat.id, interpretation_1(IMT=data['imt']),
                           parse_mode='MarkDown', reply_markup=kb_14)
    await state.set_state(States.declaration_2)

    await state.update_data(state_of_use='10_–ø–æ–∫–∞–∑–∞–Ω—ã_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    data = await state.get_data()
    list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
    id_in_base = get_max_id(data['user_id'])
    update_values_db(list_values_of_DB, id_in_base)


async def run_declaration_2(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id, f"üü£\n*–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω (–û–ú–û)*\n–£ –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–∏—Å—å –¥–≤–µ "
                                                 f"—Ü–∏—Ñ—Ä—ã:\n*–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π ({data['norm_cal']} –∫–∫–∞–ª)* - "
                                                 f"—Ä–∞—Åc—á–∏—Ç–∞–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π "
                                                 f"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. \n–≠—Ç–æ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –í—ã –º–æ–∂–µ—Ç–µ "
                                                 f"—Å—ä–µ—Å—Ç—å, –Ω–µ –±–æ—è—Å—å –Ω–∞–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–π –≤–µ—Å, —Ç.–∫. –æ–Ω–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é "
                                                 f"–∏–∑—Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–º–æ–º.",
                           parse_mode='MarkDown', reply_markup=kb_15)
    await state.set_state(States.declaration_3)


async def run_declaration_3(call: CallbackQuery, state: FSMContext, bot: Bot):
    button = call.data
    if button == 'declaration_on_3':
        data = await state.get_data()
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await bot.send_message(call.message.chat.id,
                               f"üîµ\n*–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω ({data['min_cal']} –∫–∫–∞–ª)* - —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                               f"–∫–∞–ª–æ—Ä–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ "
                               f"–æ—Ä–≥–∞–Ω–∏–∑–º–∞. \n–ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –º–µ–Ω—å—à–µ, –∑–Ω–∞—á–∏—Ç –±—É–¥—É—Ç "
                               f"–Ω–∞—Ä—É—à–∞—Ç—å—Å—è –æ–±–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∑–∞–º–µ–¥–ª—è—Ç—å—Å—è. \n–≠—Ç–æ "
                               f"–º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —É—Ö—É–¥—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.\n\n"
                               f"üü¢\n*–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏* –∏ –µ—Å—Ç—å —Ç–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π "
                               f"–¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Ö—É–¥–µ—è "
                               f"–±–µ–∑ –≤—Ä–µ–¥–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è. \n–í –í–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ "
                               f"*{data['diff_cal']}  –∫–∫–∞–ª*.",
                               parse_mode='MarkDown', reply_markup=kb_35_1)
    elif button == "next_sell":
        await state.set_state(States.sell_0)
        await run_sell_0(call, state, bot)


async def run_sell_0(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id_here = data['user_id']
    # await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    kb_here = get_keyboard_37_1(f'invitelink{user_id_here}')
    await bot.send_message(call.message.chat.id,
                           f'üü£ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£ –í–∞—Å –ø–æ—è–≤–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é "–ö–æ—Ä–æ–ª–µ–≤—Å–∫—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é" –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n'
                           f'–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤–æ—Å—å–º–∏ –¥—Ä—É–∑—å—è–º –∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –µ—ë –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç, —ç—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–∞–Ω–µ—Ç –í–∞—à–µ–π!\n\n'
                           f'–í–æ—Ç –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {BOT_URL}?start=invitelink{user_id_here}\n\n'
                           f'–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:',
                           disable_web_page_preview=True, reply_markup=kb_here)
    await asyncio.sleep(2)
    await bot.send_message(call.message.chat.id,
                           f'üü£ –ü—Ä–∏–≤–µ—Ç! –°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π –∫–ª–∞—Å—Å–Ω—ã–π –±–æ—Ç: –∑–∞ –º–∏–Ω—É—Ç—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å, –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –≤–æ–¥—ã –∏ –¥–∞—Ä–∏—Ç –ø–æ–¥–∞—Ä–∫–∏!\n'
                           f'{BOT_URL}?start=invitelink{user_id_here}', disable_web_page_preview=True, reply_markup=None)
    await asyncio.sleep(2)
    kb_here = get_keyboard_37_2(f'invitelink{user_id_here}')
    await bot.send_message(call.message.chat.id,
                           f'üü¢ –ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è –∂–¥–∞—Ç—å –∏ —Ö–æ—á–µ—Ç—Å—è –∫—É–ø–∏—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å—Ä–∞–∑—É? –ß–∏—Ç–∞–π—Ç–µ –¥–∞–ª—å—à–µ, –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!',
                           parse_mode='MarkDown', reply_markup=kb_here)

    # await asyncio.sleep(5)

    # await bot.send_photo(call.message.chat.id, FSInputFile("Media/All.png"), caption=list_of_bonuses_2,
    #                      reply_markup=kb_here)

    await state.update_data(state_of_use='7_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ_–≤—Å–µ—Ö_–±–æ–Ω—É—Å–æ–≤')
    await state.update_data(gift_friend='888')  # –û—Ç–º–µ—Ç–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ —Å—Ç—Ä–æ–∫–µ —Å —ç—Ç–æ–π –∑–∞–ø–∏—Å—å—é —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–ª–∏–Ω–∫–∏
    data = await state.get_data()
    list_values_of_DB = f"state_of_use = '{data['state_of_use']}', gift_friend = '{data['gift_friend']}'"
    id_in_base = get_max_id(data['user_id'])
    update_values_db(list_values_of_DB, id_in_base)

    await state.set_state(States.sell_1)


async def run_sell_1(call: CallbackQuery, state: FSMContext, bot: Bot):
    # await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    await bot.send_message(call.message.chat.id,
                           f"üü£ –ú–Ω–æ–≥–∏–µ —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ —Ö—É–¥–µ—Ç—å - —ç—Ç–æ –¥–æ–ª–≥–æ, –Ω—É–¥–Ω–æ –∏ —Ç—Ä—É–¥–Ω–æ, –¥–∞ –µ—â—ë –Ω–µ –¥–∞—ë—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
                           f"–û–Ω–∏, –æ—Ç—á–∞—Å—Ç–∏, –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∞–≤—ã. –¢–∞–∫–æ–µ —Å–ª—É—á–∞–µ—Ç—Å—è —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é, –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –¥–∏–µ—Ç—É.\n\n"
                           f"–°–∞–º–æ —Å–ª–æ–≤–æ ¬´–¥–∏–µ—Ç–∞¬ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–º, –∫–∞–∫ –±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º –æ –ø—Ä–æ—à–ª—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö –Ω–∞–¥ —Å–æ–±–æ–π –∏ –Ω–µ—É–¥–∞—á–∞—Ö. "
                           f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ä–∞–∑ –∑–∞ —Ä–∞–∑–æ–º.\n\n"
                           f"–°–æ–≥–ª–∞—Å–Ω—ã? –ë—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ?",
                           parse_mode='MarkDown', reply_markup=kb_28)

    await state.update_data(state_of_use='11_–Ω–∞—á–∞–ª–æ_–ø—Ä–æ–¥–∞–∂–∏')
    data = await state.get_data()
    list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
    id_in_base = get_max_id(data['user_id'])
    update_values_db(list_values_of_DB, id_in_base)

    await state.set_state(States.sell_2)


async def run_sell_2(call: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id,
                           f"üü£ –û–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∏—Ä–æ–∫–æ —Ä–∞–∑—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫ –∑–∞–º–∞–Ω–∏–≤–∞—é—Ç –≤ —Å–≤–æ–∏ —Å–µ—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞, "
                           f"–Ω–∞–≤—è–∑—ã–≤–∞—é—Ç –µ–º—É —Ç–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã, —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∏—Ö —Å–æ—á–∏–Ω–∏–ª. "
                           f"–•—É–∂–µ —Ç–æ–≥–æ, –∏–Ω–æ–≥–¥–∞ —ç—Ç–∏ —Ç–µ–æ—Ä–∏–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã.\n\n"
                           f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏–µ—Ç—ã –ø–æ—á—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ä—ã–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤–µ—Å–∞.–ê –≤—Å—ë –ø–æ—á–µ–º—É? –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª! –î–∏–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π.\n\n"
                           f"–≠—Ç–æ –∑–Ω–∞—á–∏—Ç:\n- –ª—ë–≥–∫–æ–π –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏\n- –Ω–µ —Ç—Ä–µ–±—É—é—â–µ–π –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–¥—Å—á—ë—Ç\n- –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç",
                           parse_mode='MarkDown', reply_markup=kb_29)
    await state.set_state(States.sell_3)


async def run_sell_3(call: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id,
                           f"üü£ –ö—Ç–æ-—Ç–æ —Å–∫–∞–∂–µ—Ç:¬´—ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ¬ª. –ò –±—É–¥–µ—Ç –ø—Ä–∞–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤ –µ–≥–æ –∂–∏–∑–Ω–∏ –µ—â—ë –Ω–µ —Å–ª—É—á–∏–ª–∞—Å—å –º–µ—Ç–æ–¥–∏–∫–∞ ¬´–¢—Ä–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è¬ª.\n\n"
                           f"–≠—Ç–æ –Ω–µ –¥–∏–µ—Ç–∞, –∫–∞–∫ –µ—ë –ø–æ–Ω–∏–º–∞—é—Ç –º–Ω–æ–≥–∏–µ. –≠—Ç–æ –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–æ–π–¥—É—Ç –≤ –í–∞—à—É –∂–∏–∑–Ω—å.\n\n"
                           f"–í—Å–µ –æ–Ω–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–æ–≤–µ–π—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –Ω–∞—É–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –í—Å–µ–º–∏—Ä–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n\n"
                           f"–ü—Ä–∏–Ω—Ü–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —á–µ–ª–æ–≤–µ–∫—É —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Å, –ø—Ä–æ–¥–ª–∏—Ç—å –∂–∏–∑–Ω—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–µ–ø–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã.",
                           parse_mode='MarkDown', reply_markup=kb_30)
    await state.set_state(States.sell_4)


async def run_sell_4(call: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id,
                           f"üü£ –í—ã –ª–µ–≥–∫–æ –æ—Å–≤–æ–∏—Ç–µ –∏—Ö, –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∏ –ø–æ—Ä–∞–∑–∏—Ç–µ—Å—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–±–æ—Ç–∞ –æ —Å–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç–µ –∏ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏, "
                           f"–æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–µ—Ç –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π, –ª—ë–≥–∫–æ–π –∏ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ–π!\n\n"
                           f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ:\n"
                           f"–í–∞–º –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –º–µ–Ω—è—Ç—å –≤ –∂–∏–∑–Ω–∏ –ø–æ—á—Ç–∏ –Ω–∏—á–µ–≥–æ, –Ω–æ –≤–µ—Å –Ω–∞—á–Ω—ë—Ç –Ω–µ—É–∫–ª–æ–Ω–Ω–æ —Å–Ω–∏–∂–∞—Ç—å—Å—è.\n"
                           f"–°–∫—Ä—É–ø—É–ª—ë–∑–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω.\n"
                           f"–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–æ–π –í—ã —Å—Ç–∞–Ω–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –∏–ª–∏ –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤–æ–≤—Å–µ.\n"
                           f"–° –∫–∞–∂–¥—ã–º –¥–Ω—ë–º –∑–µ—Ä–∫–∞–ª–æ –±—É–¥–µ—Ç —Ä–∞–¥–æ–≤–∞—Ç—å –í–∞—Å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Å—ë –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ.\n"
                           f"–í–µ—Ä–Ω—É—Ç—Å—è –ª—ë–≥–∫–æ—Å—Ç—å –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.\n\n"
                           f"–ò –í—ã —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
                           parse_mode='MarkDown', reply_markup=kb_31)
    await state.set_state(States.sell_5)


async def run_sell_5(call: CallbackQuery, state: FSMContext, bot: Bot):
    button = call.data
    if button == 'replies':
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await bot.send_message(call.message.chat.id,
                               f'üü† –í–æ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –º–Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞ –ù–∞–¥–µ–∂–¥–∞:\n'
                               f'"–Ø —Å–º–æ–≥–ª–∞, –¥–µ–≤–æ—á–∫–∏! –°–º–æ–≥–ª–∞! –î–æ—Å—Ç–∞–ª–∞ –ø–ª–∞—Ç—å–µ –∏–∑ —à–∫–∞—Ñ–∞, –Ω–∞–¥–µ–ª–∞...\n'
                               f'–ü—Ä–æ—Å—Ç–æ —Å–ª—ë–∑—ã –Ω–∞ –≥–ª–∞–∑–∞—Ö - —Å–ª–æ–≤–Ω–æ —è –≤–µ—Ä–Ω—É–ª–∞—Å—å –Ω–∞ –º–Ω–æ–≥–æ –ª–µ—Ç –Ω–∞–∑–∞–¥! '
                               f'–í —Ç–æ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —è –±—ã–ª–∞ —Å–æ–≤—Å–µ–º —é–Ω–æ–π –∏ —Å—Ç—Ä–æ–π–Ω–æ–π.\n'
                               f'–ò —Ç–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –≤—ã–≥–ª—è–∂—É —Ç–∞–∫–∂–µ. –ú—É–∂ –Ω–µ –¥–∞—Å—Ç —Å–æ–≤—Ä–∞—Ç—å. '
                               f'–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –µ–º—É –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –¥–∞–∂–µ –±–æ–ª—å—à–µ, —á–µ–º –º–Ω–µ )".',
                               parse_mode='MarkDown', reply_markup=kb_33)

        await state.update_data(state_of_use='12_—Å—Ç–∞—Ä—Ç_–æ—Ç–∑—ã–≤—ã')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

        await state.set_state(States.reply_1)

    elif button == 'inside':
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await bot.send_photo(call.message.chat.id, FSInputFile("Media/Oblozhka_5.png"),
                             caption=f'üü£ –í –∫–Ω–∏–≥–µ –í—ã –Ω–∞–π–¥—ë—Ç–µ:\n\nüîπ –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É\n'
                                     f'üîπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –æ—Å–Ω–æ–≤ –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è (—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏)\nüîπ'
                                     f' –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é - –∑–∞–≤—Ç—Ä–∞–∫–∏, –æ–±–µ–¥—ã, —É–∂–∏–Ω—ã, –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã\n'
                                     f'üîπ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è (–¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é)\n'
                                     f'üîπ –ß–µ–∫-–ª–∏—Å—Ç –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ "–ß—Ç–æ –µ—Å—Ç—å, —á—Ç–æ–±—ã –ø–æ—Ö—É–¥–µ—Ç—å"\n'
                                     f'üîπ –¢–û–ü 5 –û—à–∏–±–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –ø–æ—Ö—É–¥–µ—Ç—å\n'
                                     f'–°–µ–≥–æ–¥–Ω—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ "–¢—Ä–∏ –ø—Ä–∞–≤–∏–ª–∞ –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ü–∏—Ç–∞–Ω–∏—è" –≤—Å–µ–≥–æ *1750 —Ä—É–±–ª–µ–π* (–≤–º–µ—Å—Ç–æ 3350).\n'
                                     f'–í–º–µ—Å—Ç–µ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º ¬´–¢—Ä–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è¬ª –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –±–æ–Ω—É—Å—ã "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏" –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã!\n\n'
                                     f'üü¢ –ò–ª–∏ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ "–ö–æ—Ä–æ–ª–µ–≤—Å–∫—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é" —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 1200 –≤—Å–µ–≥–æ –∑–∞ *390 —Ä—É–±–ª–µ–π* –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–æ—á–Ω—ã–π –∫—É–ø–æ–Ω –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ ¬´–¢—Ä–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è¬ª',
                             parse_mode='MarkDown', reply_markup=kb_38)

        await state.update_data(state_of_use='13_—á—Ç–æ_–≤–Ω—É—Ç—Ä–∏')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–Ω—É—Å–∞ —é–∑–µ—Ä—É –≤ –±–æ—Ç–µ
        data = await state.get_data()
        user_id_here = data['user_id']

        is_bonus_selected, is_bonus_sended_by_email, is_bonus_sended_by_bot = await check_bonus_sended(user_id_here,
                                                                                                       state, bot)

        if is_bonus_sended_by_bot != 'by_bot':
            if is_bonus_selected != '0':
                await asyncio.sleep(5)
                await bot.send_document(user_id_here, FSInputFile(f"Attachments/{is_bonus_selected}.pdf"),
                                        caption=f'–ö—Å—Ç–∞—Ç–∏, –≤—ã—Å—ã–ª–∞—é –í–∞–º –±–æ–Ω—É—Å, –∫–æ—Ç–æ—Ä—ã–π –í—ã –≤—ã–±—Ä–∞–ª–∏.',
                                        reply_markup=None)
                if is_bonus_sended_by_email == 'by_email':
                    await bot.send_message(call.message.chat.id, "üìß –ü–∏—Å—å–º–æ –Ω–∞ –∏–º–µ–π–ª —Ç–∞–∫ –∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                                           reply_markup=None)
                await state.update_data(
                    gift_friend='888')  # –û—Ç–º–µ—Ç–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ —Å—Ç—Ä–æ–∫–µ —Å —ç—Ç–æ–π –∑–∞–ø–∏—Å—å—é —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–ª–∏–Ω–∫–∏
                data = await state.get_data()
                list_values_of_DB = f"gift_sended = 'by_bot', gift_friend = '{data['gift_friend']}'"
                id_in_base = get_max_id(data['user_id'])
                update_values_db(list_values_of_DB, id_in_base)

        await state.set_state(States.sell_6)


async def run_reply_1(call: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id,
                           f'üü† –ò–ª–∏ –ø–∏—Å—å–º–æ –¢–∞—Ç—å—è–Ω—ã:\n"–£ –º–µ–Ω—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–æ–∂–∞–Ω—ã–π —Ä–µ–º–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–æ—Å–∏–ª–∞ –µ—â—ë –¥–µ—Å—è—Ç—å –ª–µ—Ç –Ω–∞–∑–∞–¥.\n'
                           f'–ò —Ç–∞ —Å–∞–º–∞—è –¥—ã—Ä–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —è –µ–≥–æ –∑–∞—Å—Ç—ë–≥–∏–≤–∞–ª–∞ —Ç–æ–≥–¥–∞, —Ç–µ–ø–µ—Ä—å –º–æ—è —Ü–µ–ª—å.\n'
                           f'–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ –∑–∞—Å—Ç–µ–≥–Ω—É –Ω–∞ –Ω–µ—ë —Ä–µ–º–µ–Ω—å, –≤–µ–¥—å –¥–æ –Ω–µ—ë –æ—Å—Ç–∞–ª–∞—Å—å –µ—â—ë —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, –∞ –±—ã–ª–æ —á–µ—Ç—ã—Ä–µ!'
                           f'–î–æ –Ω–µ—ë –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, –∞ –±—ã–ª–æ —á–µ—Ç—ã—Ä–µ!\n–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ —Å–º–æ–≥—É!"',
                           parse_mode='MarkDown', reply_markup=kb_33)
    await state.set_state(States.reply_2)


async def run_reply_2(call: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id,
                           f'üü† –û—Ç–∑—ã–≤ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏:\n"2,5 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ —è –ø–æ—Å—Ç–∞–≤–∏–ª–∞ —Å–µ–±–µ —Ü–µ–ª—å - '
                           f'–ø–æ—Ö—É–¥–µ—Ç—å –∫ –ª–µ—Ç—É –Ω–∞ 6 –∫–∏–ª–æ–≥—Ä–∞–º–º —Å –ø–æ–º–æ—â—å—é –¢—Ä–µ—Ö –ø—Ä–∞–≤–∏–ª –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ü–∏—Ç–∞–Ω–∏—è. –ò –≤–µ–¥—å —Å—Ä–∞–±–æ—Ç–∞–ª–æ! '
                           f'–ü–æ–ª—É—á–∏–ª–æ—Å—å –¥–∞–∂–µ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏—Ç—å: –±—ã–ª–æ 72 –∫–≥, –∞ —Å—Ç–∞–ª–æ 62!\n'
                           f'–ù–µ –æ–∂–∏–¥–∞–ª–∞, —á—Ç–æ —ç—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è –æ–∫–∞–∂–µ—Ç—Å—è –Ω–∞—Å—Ç–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π!\n'
                           f'–Ø –Ω–∞—á–∏–Ω–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞, –∫–æ–≥–¥–∞ –µ—â–µ –Ω–µ –∑–Ω–∞–ª–∞ —Å–≤–æ–µ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–≥–æ –æ–±–º–µ–Ω–∞ (–£–ú–ö–ê –±–æ—Ç –µ—â–µ –Ω–µ —Ä–æ–¥–∏–ª—Å—è) '
                           f'–æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —è –Ω–µ–¥–æ–µ–¥–∞–ª–∞! –ë—ã–ª–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —É—Ä–µ–∑–∞—Ç—å —Å–µ–±—è –≤ –µ–¥–µ, –∞ –Ω–∞–æ–±–æ—Ä–æ—Ç, –¥–æ–±–∞–≤–ª—è—Ç—å!\n'
                           f'–û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ü–∏—Ñ—Ä—ã –Ω–∞ –≤–µ—Å–∞—Ö —Ç–∞–∫ —Ä–∞–¥–æ–≤–∞–ª–∏! –í –æ–±—â–µ–º, –Ω–µ —Ö–æ–∂—É, –∞ –ª–µ—Ç–∞—é, –≤—Å—è —Ç–∞–∫–∞—è –¥–æ–≤–æ–ª—å–Ω–∞—è, —á–µ–≥–æ –∏ –≤–∞–º –∂–µ–ª–∞—é!"',
                           parse_mode='MarkDown', reply_markup=kb_34)
    await state.set_state(States.sell_5)


async def run_sell_6(call: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    button = call.data
    data = await state.get_data()
    user_id_here = data["user_id"]

    await state.update_data(state_of_use='13_—Å–æ–≤–µ—Ä—à–∏—Ç—å_–ø–æ–∫—É–ø–∫—É')
    data = await state.get_data()
    list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
    id_in_base = get_max_id(data['user_id'])
    update_values_db(list_values_of_DB, id_in_base)

    if button == 'buy_book':
        kb_here = get_keyboard_23(f'invitelink{user_id_here}')
        await bot.send_message(call.message.chat.id,
                               f'üü¢ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –î–∞–∂–µ —è ‚Äî —Ä–æ–±–æ—Ç ‚Äî —ç—Ç–æ –ø–æ–Ω–∏–º–∞—é!\n\n'
                               f'üü¢ –ö–∞–∫ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É:\n\n'
                               f'1. –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥*\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n3. –í—ã –ø–æ–ø–∞–¥—ë—Ç–µ –≤ –±–æ—Ç –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–∞\n4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å"',
                               parse_mode='MarkDown', reply_markup=kb_here)

    elif button == 'buy_book_promo':
        data = await state.get_data()
        promo_switch = data['promo']
        if promo_switch == 1:
            kb_here = get_keyboard_23_2(f'invitelink{user_id_here}')
            await bot.send_message(call.message.chat.id,
                                   f'üü¢ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¶–µ–Ω–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n\n'
                                   f'üü¢ –ö–∞–∫ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É:\n\n'
                                   f'1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n2. –í—ã –ø–æ–ø–∞–¥—ë—Ç–µ –≤ –±–æ—Ç –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–∞\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å"',
                                   parse_mode='MarkDown', reply_markup=kb_here)
        else:
            kb_here = get_keyboard_23(f'invitelink{user_id_here}')
            await bot.send_message(call.message.chat.id,
                                   f'üü¢ –ö–∞–∫ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É:\n\n'
                                   f'1. –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥*\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n3. –í—ã –ø–æ–ø–∞–¥—ë—Ç–µ –≤ –±–æ—Ç –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–∞\n4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å"',
                                   parse_mode='MarkDown', reply_markup=kb_here)

        await state.update_data(state_of_use='9_–∫–æ–Ω–µ—Ü')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

    elif button == 'list_bonuses':
        await bot.send_message(call.message.chat.id,
                               f'üü† –í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–æ–Ω—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:', parse_mode='MarkDown',
                               reply_markup=None)
        await asyncio.sleep(2)
        await bot.send_photo(call.message.chat.id, FSInputFile("Media/All.png"), caption=list_of_bonuses_2,
                             reply_markup=kb_38)

    elif button == 'promocode':
        await state.set_state(States.promocode)
        await bot.send_message(call.message.chat.id,
                               f'üü† –í—ã—à–ª–∏—Ç–µ –º–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥', parse_mode='MarkDown', reply_markup=None)


async def get_promocode(message: Message, state: FSMContext, bot: Bot):
    promo_here = message.text
    if promo_here == PROMOCODE:
        await state.set_state(States.sell_6)
        await message.answer('üü† –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!', reply_markup=kb_39)
        await state.update_data(promo=1)

        await state.update_data(state_of_use='14_–ø—Ä–æ–º–æ–∫–æ–¥_–ø—Ä–∏–Ω—è—Ç')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

    else:
        await state.set_state(States.sell_6)
        await message.answer('üî¥ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=kb_40)
        await state.update_data(promo=0)


async def get_support(message: Message):
    await message.answer(
        f"üü† –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–π –µ–≥–æ –≤ –±–æ—Ç–µ\n[‚öôÔ∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞](http://t.me/Queens_Support_bot) ",
        disable_web_page_preview=True, parse_mode='Markdown', reply_markup=None)


# # -----------------------------------------------------------------------------------
# # –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏–º–µ–π–ª–∞

async def subscribing(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id_here = data['user_id']

    tmp = await bot.get_chat_member(CHANNEL_FOR_CHECKING, user_id_here)
    if tmp.status == 'left':
        await bot.send_message(call.message.chat.id,
                               "–û–π! –Ø –≤–∏–∂—É –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á—É–¥–µ—Å–Ω—ã–π –∫–∞–Ω–∞–ª '[–ö–æ—Ä–æ–ª–µ–≤—ã –ö–∞–ª–æ—Ä–∏–π üëë]("
                               "https://t.me/+Vx6aUW5AO6U5M2U0)'!\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –∞ —è –í–∞—Å –ø–æ–∫–∞ –ø–æ–¥–æ–∂–¥—É!",
                               disable_web_page_preview=True, parse_mode='Markdown', reply_markup=kb_5)
        if call.data == 'subscribed':
            tmp = await bot.get_chat_member(CHANNEL_FOR_CHECKING, user_id_here)
            if tmp.status != 'left':
                await state.update_data(state_of_use='5_–ø–æ–¥–ø–∏—Å–∞–Ω')
                data = await state.get_data()
                list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
                update_values_db(list_values_of_DB, get_max_id(data['user_id']))

                await getting_email(call, state, bot)
    else:
        await state.update_data(state_of_use='5_–ø–æ–¥–ø–∏—Å–∞–Ω')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}'"
        update_values_db(list_values_of_DB, get_max_id(data['user_id']))

        await getting_email(call, state, bot)


async def getting_email(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id_here = data['user_id']
    # data = await state.get_data()
    # is_email = data['is_email']
    # come_from = data['come_from']
    # if come_from == '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π':
    request = await is_email_in_DB(user_id_here)
    if request == '0':
        await bot.send_message(call.message.chat.id, "üî∏ –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏/–∏–ª–∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –∏–º–µ–π–ª.\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ë–µ–∑ –∏–º–µ–π–ª–∞* –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞",
                               parse_mode='MarkDown', reply_markup=r_kb_5)
        await state.set_state(States.email_checking)

        await state.update_data(state_of_use='6_—Å—Ç–∞—Ä—Ç_–∑–∞–ø—Ä–æ—Å–∞_–∏–º–µ–π–ª–∞')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}', gift = '{data['gift']}'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

    else:
        is_correct = is_email_correct(request)
        if is_correct:
            await bot.send_message(call.message.chat.id, f"‚û°Ô∏è –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º: –í–∞—à email {request}", reply_markup=kb_9)
            await state.update_data(email=request)
            await state.set_state(States.email_right)


async def email_checking(message: Message, state: FSMContext, bot: Bot):
    if message.text != '–ë–µ–∑ –∏–º–µ–π–ª–∞':
        is_correct = is_email_correct(message.text)
        if is_correct:
            await message.answer(f"‚û°Ô∏è –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º: –í–∞—à email {message.text}", reply_markup=kb_9)
            await state.update_data(email=message.text)
            await state.set_state(States.email_right)
        else:
            await message.answer(f"–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∏–º–µ–π–ª", reply_markup=None)
    else:
        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –∏–º–µ–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?", reply_markup=kb_41)
        await state.set_state(States.email_right)


async def end_of_email(call: CallbackQuery, state: FSMContext, bot: Bot):
    button = call.data
    if button == 'right_email':
        # await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await state.update_data(state_of_use='7_–∏–º–µ–π–ª_–ø–æ–ª—É—á–µ–Ω')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}', email = '{data['email']}, is_email = 'with_email''"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

        # !!! –¢–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ 1!!!
        await state.set_state(States.email_exit)
        await exit_email(call, state, bot)

    elif button == 'without_email':
        # await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await state.update_data(state_of_use='7_–±–µ–∑_–∏–º–µ–π–ª–∞')
        await state.update_data(is_email='wo_email')
        # await state.update_data(wo_email='wo_email')
        data = await state.get_data()
        list_values_of_DB = f"state_of_use = '{data['state_of_use']}', is_email = 'wo_email'"
        id_in_base = get_max_id(data['user_id'])
        update_values_db(list_values_of_DB, id_in_base)

        # !!! –¢–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ 2!!!
        await state.set_state(States.email_exit)
        await exit_email(call, state, bot)

    elif button == 'wrong_email':
        # await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        await bot.send_message(call.message.chat.id, "üî∏ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –∏–º–µ–π–ª",
                               parse_mode='MarkDown', reply_markup=None)
        await state.set_state(States.email_checking)


async def exit_email(call, state, bot):
    data = await state.get_data()
    exit_here = data['exit_email']
    if exit_here == 1:
        await state.set_state(States.send_email_wo_bonus)
        await send_email_wo_bonus(call, state, bot)
    elif exit_here == 2:
        await state.set_state(States.select_gift_yes)
        await select_gift_yes(call, state, bot)


async def is_email_in_DB(user_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ –∏–º–µ–π–ª
    was_email_received = '0'
    xxx = request_to_db_column('email', 'user_id', user_id)
    for x in tuple(xxx):
        for v in x:
            v = str(v)
            if v != 'None':
                was_email_received = v
                break
    return was_email_received
